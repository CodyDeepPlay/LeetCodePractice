#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Feb 23 21:16:55 2025

@author: mingmingzhang


Leetcode Q153

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.

You must write an algorithm that runs in O(log n) time.

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 

"""




class Solution:
    def yourSolution(self,  nums):

        '''
        Conduct a binary search.
        
        first calculate the middle index of left and right index,
        
        Because this is a sorted, but mightbe rotated array:
            if the value at the mid index is bigger than the right index value,
                then the smallest value is on the right side of the array.
            if the mid index value is smaller than the right index value, 
                then the smallest value is on the left side of the array.
        
        
        
        
        '''
        
        n = len(nums)
        if n == 1: return nums[0]
        
        l = 0; r = n-1
        
        while l<r: 
            m = (l+r)//2 # mid index            
            if    nums[m]>nums[r]:  l= m+1 # look for the rifht side
            elif  nums[m]<=nums[r]: r=m    # look for the left side
            
        # at the very end, l, m, r will all be the same index, which is the smallest value
        return nums[l]
        


#%%


nums = [3,4,5,1,2] # Output: 1
#nums = [4,5,6,7,0,1,2]# Output: 0

#nums = [11,13,15,17] # Output: 11



results = Solution()
output = results.yourSolution(nums )      
print(output)





  